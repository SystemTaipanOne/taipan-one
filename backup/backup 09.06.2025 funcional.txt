index.html

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Taipan-One ERP Access</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Deep Slate & Corporate Blue with Metallic Accents -->
    <!-- Application Structure Plan: This version connects the frontend to the backend server. The mock JS database is removed. The login form now uses the fetch API to send credentials to the Node.js server and handles the response, rendering the UI based on real (simulated via backend) database authentication. -->
    <!-- Visualization & Content Choices: 
        - Frontend Logic: The core change is in the JavaScript, specifically the loginForm event listener, which now implements a real API call.
        - UI Rendering: The logic for rendering the sidebar and user context is now driven by the JSON data received from the server upon successful login.
    -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body.login-screen {
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            background-color: #e2e8f0;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            padding: 1rem;
        }
        body.erp-screen {
             font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            background-color: #f1f5f9;
        }
        #loginAppContainer {
            background: linear-gradient(145deg, #1e293b 0%, #0f172a 100%);
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.45);
            border: 1px solid #334155;
        }
        #loginAppHeader { background-color: rgba(0,0,0,0.2); }
        .login-input { background-color: rgba(255,255,255,0.05); border: 1px solid #475569; color: #e2e8f0; }
        .login-input:focus { background-color: rgba(255,255,255,0.1); border-color: #64748b; outline: none; box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5); }
        .login-button { background: linear-gradient(to right, #3b82f6, #2563eb); transition: all 0.3s ease; }
        .login-button:hover { background: linear-gradient(to right, #2563eb, #1d4ed8); box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3); }

        #erpContainer { box-shadow: 0 20px 40px rgba(0,0,0,0.15); }
        #sidebar { background-color: #0f172a; border-right: 1px solid #1e293b; }
        #sidebarNav .nav-link.active { background-image: linear-gradient(to right, #2563eb, #3b82f6); color: white; }
        #sidebarNav .nav-link:not(.active):hover { background-color: #1e293b; }
        #sidebar .sidebar-section-title { color: #94a3b8; }
        #erpHeader { background-color: #ffffff; box-shadow: 0 2px 4px rgba(0,0,0,0.05); }
        .kpi-card { background-color: #ffffff; border: 1px solid #e5e7eb; box-shadow: 0 4px 12px rgba(0,0,0,0.05); transition: transform 0.2s ease-out, box-shadow 0.2s ease-out; }
        .kpi-card:hover { transform: translateY(-4px); box-shadow: 0 8px 16px rgba(0,0,0,0.1); }
        .module-section { background-color: #ffffff; padding: 1.5rem; border-radius: 0.75rem; border: 1px solid #e2e8f0; box-shadow: 0 4px 6px -1px rgba(0,0,0,0.07), 0 2px 4px -1px rgba(0,0,0,0.04); }
        .chart-container-wrapper { background-color: #ffffff; padding: 1.5rem; border-radius: 0.75rem; border: 1px solid #e2e8f0; box-shadow: 0 4px 6px -1px rgba(0,0,0,0.07), 0 2px 4px -1px rgba(0,0,0,0.04); }
        .chart-container { position: relative; height: 320px; width: 100%; }
        .modal { transition: opacity 0.25s ease; }
        .modal-content { transition: transform 0.25s ease; }
        .spinner { border-top-color: #3b82f6; animation: spinner 0.6s linear infinite; }
        @keyframes spinner { to { transform: rotate(360deg); } }
        #sidebar nav::-webkit-scrollbar { width: 6px; }
        #sidebar nav::-webkit-scrollbar-track { background: #0f172a; }
        #sidebar nav::-webkit-scrollbar-thumb { background: #334155; border-radius: 3px; }
        #sidebar nav::-webkit-scrollbar-thumb:hover { background: #475569; }
        .page-content h2 { color: #111827; font-weight: 700; }
        .page-content h3 { font-size: 1.125rem; font-weight: 600; color: #1f2937; margin-top: 1.25rem; margin-bottom: 0.75rem; padding-bottom: 0.5rem; border-bottom: 1px solid #d1d5db; }
    </style>
</head>
<body class="login-screen">

    <div id="loginAppContainer" class="w-full max-w-md rounded-xl overflow-hidden">
        <div id="loginAppHeader" class="px-6 py-4 flex justify-between items-center">
            <div class="flex items-center space-x-2">
                <span class="w-3 h-3 bg-red-500 rounded-full"></span>
                <span class="w-3 h-3 bg-yellow-400 rounded-full"></span>
                <span class="w-3 h-3 bg-green-500 rounded-full"></span>
            </div>
            <span id="connectionStatus" class="text-xs text-green-400 flex items-center"><span class="w-2 h-2 bg-green-400 rounded-full mr-1.5"></span>Conectado</span>
        </div>
        <div class="p-8 md:p-12">
            <div class="text-center mb-10">
                <h1 class="text-4xl font-bold text-white mb-2">Taipan-One</h1>
                <p class="text-slate-400 text-sm">Enterprise Resource Planning</p>
            </div>
            <form id="loginForm" class="space-y-6">
                <div>
                    <label for="username" class="block text-sm font-medium text-slate-300 mb-1">Utilizador</label>
                    <input type="text" id="username" name="username" class="login-input w-full px-4 py-3 rounded-lg text-sm" required>
                </div>
                <div>
                    <label for="password" class="block text-sm font-medium text-slate-300 mb-1">Senha</label>
                    <input type="password" id="password" name="password" class="login-input w-full px-4 py-3 rounded-lg text-sm" required>
                </div>
                <div class="text-red-400 text-xs text-center h-4" id="loginError"></div>
                <div>
                    <button type="submit" class="login-button w-full text-white font-semibold py-3 px-4 rounded-lg shadow-md focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75">
                        Aceder ao Sistema
                    </button>
                </div>
            </form>
            <p class="mt-8 text-center text-xs text-slate-500">&copy; 2025 Taipan Systems Inc.</p>
        </div>
    </div>

    <div id="erpContainer" class="hidden w-screen h-screen">
        <div id="topBar" class="fixed top-0 left-0 right-0 bg-slate-900 text-white p-2 text-xs z-50 flex items-center justify-center space-x-3">
            <span>Sess√£o Ativa:</span>
            <span id="activeUserDisplay" class="font-semibold text-blue-300"></span>
            <span class="text-slate-500">|</span>
            <span id="activeCompanyDisplay" class="text-slate-400"></span>
        </div>

        <div class="flex h-full pt-8">
            <aside id="sidebar" class="w-72 text-slate-200 flex flex-col transition-all duration-300 ease-in-out md:flex">
                <div class="h-16 flex items-center justify-center border-b border-slate-700 flex-shrink-0">
                    <h1 class="text-2xl font-bold text-white">Taipan-One</h1>
                </div>
                <nav id="sidebarNav" class="flex-1 px-2 py-4 space-y-1 overflow-y-auto"></nav>
                <div id="sidebarFooter" class="px-2 py-3 border-t border-slate-700 flex-shrink-0"></div>
            </aside>

            <div class="flex-1 flex flex-col overflow-hidden">
                <header id="erpHeader" class="h-16 border-b border-slate-200 flex items-center justify-between px-6 flex-shrink-0">
                    <div class="flex items-center">
                        <button id="menu-toggle" class="md:hidden mr-4 text-slate-600 hover:text-slate-800">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path></svg>
                        </button>
                    </div>
                    <div class="flex items-center space-x-6">
                        <button class="text-slate-500 hover:text-blue-600 relative"><span class="text-2xl">üîî</span><span class="absolute -top-1 -right-1.5 text-xs bg-red-500 text-white rounded-full px-1.5 py-0.5">3</span></button>
                        <div class="relative group">
                            <button class="text-slate-500 hover:text-blue-600"><span class="text-2xl">‚ùì</span></button>
                            <div class="absolute right-0 mt-2 w-56 bg-white rounded-md shadow-xl py-1 hidden group-hover:block z-10 border"><a href="#" class="block px-4 py-2.5 text-sm text-slate-700 hover:bg-slate-100">Central de Ajuda</a></div>
                        </div>
                        <div class="flex items-center space-x-3">
                            <div id="userAvatar" class="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-indigo-600 flex items-center justify-center font-semibold text-white text-lg shadow-md"></div>
                            <div>
                                <p id="userName" class="text-sm font-semibold text-slate-800"></p>
                                <p id="userRole" class="text-xs text-slate-500"></p>
                            </div>
                        </div>
                    </div>
                </header>

                <main class="flex-1 overflow-x-hidden overflow-y-auto bg-slate-100 p-6 md:p-8"></main>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            
            // --- CONFIGURA√á√ÉO GLOBAL ---
            const allModules = [
                { id: "dashboard", title: "Dashboard", icon: "üìä", section: "Geral" },
                { id: "ceo_cockpit", title: "Cockpit do CEO", icon: "üëë", section: "Executivo" },
                { id: "vendas_crm", title: "Vendas & CRM", icon: "üõí", section: "Comercial" },
                { id: "contabilidade", title: "Contabilidade", icon: "üßæ", section: "Financeiro" },
                { id: "recursos_humanos", title: "Recursos Humanos", icon: "üë•", section: "RH & Pessoal" },
                { id: "gestao_estoque", title: "Gest√£o de Estoque", icon: "üì¶", section: "Opera√ß√µes" },
                { id: "gestao_producao_pcp", title: "Produ√ß√£o (PCP)", icon: "üè≠", section: "Opera√ß√µes" },
                { id: "company_user_management", title: "Gest√£o de Utilizadores", icon: "üßë‚Äçüíº", section: "Administra√ß√£o Empresa" },
                { id: "super_admin_client_management", title: "Gest√£o de Clientes", icon: "ÔøΩ", section: "Administra√ß√£o Global" },
                { id: "super_admin_system_updates", title: "Atualiza√ß√µes do Sistema", icon: "üîÑ", section: "Administra√ß√£o Global" },
                { id: "configuracoes_sistema", title: "Configura√ß√µes", icon: "‚öôÔ∏è", section: "Suporte" },
            ];
            
            // --- Elementos do DOM ---
            const loginAppContainer = document.getElementById('loginAppContainer');
            const erpContainer = document.getElementById('erpContainer');
            const loginForm = document.getElementById('loginForm');
            const loginError = document.getElementById('loginError');

            const sidebarNav = document.getElementById('sidebarNav');
            const sidebarFooter = document.getElementById('sidebarFooter');
            const menuToggle = document.getElementById('menu-toggle');
            const sidebar = document.getElementById('sidebar');
            
            const activeUserDisplay = document.getElementById('activeUserDisplay');
            const activeCompanyDisplay = document.getElementById('activeCompanyDisplay');
            const userNameEl = document.getElementById('userName');
            const userRoleEl = document.getElementById('userRole');
            const userAvatarEl = document.getElementById('userAvatar');
            const mainContentArea = document.querySelector('main');

            // --- L√ìGICA DE LOGIN ---
            loginForm.addEventListener('submit', async (event) => {
                event.preventDefault();
                loginError.textContent = '';
                const username = loginForm.username.value;
                const password = loginForm.password.value;

                try {
                    const response = await fetch('http://localhost:3000/api/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ username, password }),
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.message || 'Erro ao autenticar.');
                    }
                    
                    // Se o login for bem-sucedido, a resposta ter√° os dados do utilizador
                    const loggedInUser = data.user;
                    
                    document.body.classList.remove('login-screen');
                    document.body.classList.add('erp-screen');
                    loginAppContainer.classList.add('hidden');
                    erpContainer.classList.remove('hidden');
                    
                    initializeERP(loggedInUser);

                } catch (error) {
                    loginError.textContent = error.message;
                }
            });
            
            // --- INICIALIZA√á√ÉO DO ERP P√ìS-LOGIN ---
            function initializeERP(user) {
                updateUserContext(user);
                createPagePlaceholders(user.role.permissions);
                populateSidebar(user.role.permissions);
                showPage('dashboard');
                setActiveSidebarLink('#dashboard');
                
                // Desenhar o gr√°fico apenas uma vez
                if (!window.salesChartInstance && document.getElementById('salesChart')) {
                    window.salesChartInstance = new Chart(document.getElementById('salesChart').getContext('2d'), { 
                        type: 'bar', data: { labels: ['Jan','Fev','Mar','Abr','Mai','Jun'], datasets: [{ label: 'Vendas', data: [120,135,142,118,160,152.6], backgroundColor: 'rgba(59,130,246,0.8)', borderRadius:6, barThickness: 25 }] },
                        options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, grid: { color: '#e5e7eb' }, ticks: { color: '#6b7280', callback: (v) => `R$${v}k` }}, x: { grid: { display: false }, ticks: { color: '#6b7280' }}}, plugins: { legend: {display:false}, tooltip: {backgroundColor: '#1f2937', titleColor: '#e5e7eb', bodyColor: '#e5e7eb', callbacks:{label:(c)=>`${c.dataset.label}: R$${c.parsed.y}k`}}}}
                    });
                }
            }
            
            // --- FUN√á√ïES DE UI ---
            function updateUserContext(user) {
                const displayName = user.fullName;
                const displayRole = user.role.name;
                const displayCompany = user.company.name;
                
                activeUserDisplay.textContent = `${displayName} (${displayRole})`;
                activeCompanyDisplay.textContent = `Empresa: ${displayCompany}`;

                userNameEl.textContent = displayName;
                userRoleEl.textContent = displayRole;
                userAvatarEl.textContent = displayName.split(' ').map(n => n[0]).join('').substring(0,2);
            }

            function populateSidebar(userPermissions) {
                sidebarNav.innerHTML = '';
                sidebarFooter.innerHTML = '';
                
                const accessibleModules = allModules.filter(m => userPermissions.includes(m.id) || m.id === 'configuracoes_sistema');

                const sections = {};
                accessibleModules.forEach(module => {
                    if (module.id !== 'configuracoes_sistema') {
                        if (!sections[module.section]) sections[module.section] = [];
                        sections[module.section].push(module);
                    }
                });

                const sectionOrder = ["Geral", "Executivo", "Comercial", "Financeiro", "RH & Pessoal", "Opera√ß√µes", "Administra√ß√£o Empresa", "Administra√ß√£o Global"];
                sectionOrder.forEach(sectionName => {
                    if (sections[sectionName]) {
                        const sectionTitleEl = document.createElement('div');
                        sectionTitleEl.className = 'sidebar-section-title';
                        sectionTitleEl.textContent = sectionName;
                        sidebarNav.appendChild(sectionTitleEl);
                        sections[sectionName].forEach(module => {
                            const link = document.createElement('a');
                            link.href = `#${module.id}`;
                            link.className = 'nav-link flex items-center px-3 py-2.5 text-sm font-medium rounded-lg hover:bg-slate-700 transition-colors';
                            link.innerHTML = `<span class="sidebar-icon">${module.icon}</span><span class="ml-3">${module.title}</span>`;
                            link.addEventListener('click', handleNavLinkClick);
                            sidebarNav.appendChild(link);
                        });
                    }
                });
                
                // Adicionar Configura√ß√µes ao footer
                const settingsModule = allModules.find(m => m.id === 'configuracoes_sistema');
                if (settingsModule) {
                     const settingsLink = document.createElement('a');
                    settingsLink.href = "#configuracoes_sistema";
                    settingsLink.className = 'nav-link flex items-center px-3 py-2.5 text-sm font-medium rounded-lg hover:bg-slate-700 transition-colors';
                    settingsLink.innerHTML = `<span class="sidebar-icon">${settingsModule.icon}</span><span class="ml-3">${settingsModule.title}</span>`;
                    settingsLink.addEventListener('click', handleNavLinkClick);
                    sidebarFooter.appendChild(settingsLink);
                }
            }

            function createPagePlaceholders(userPermissions) {
                 mainContentArea.innerHTML = '';
                 allModules.filter(m => userPermissions.includes(m.id)).forEach(module => {
                    let pageContent = `<h2 class="text-3xl">${module.title}</h2><div class="module-section mt-6">Conte√∫do para o m√≥dulo "${module.title}".</div>`;
                    
                    if (module.id === 'dashboard') {
                        pageContent = `<h2 id="dashboardTitle" class="text-3xl mb-1">Dashboard</h2>
                        <p id="dashboardSubtitle" class="text-base text-slate-500 mb-8"></p>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                            <div class="kpi-card p-6 rounded-xl"><h3 class="text-sm font-medium text-slate-500">Faturamento Mensal</h3><p class="text-3xl font-bold mt-2">R$ 152.680,50</p><p class="text-xs text-green-500 mt-1">+12,5%</p></div>
                            <div class="kpi-card p-6 rounded-xl"><h3 class="text-sm font-medium text-slate-500">Novos Pedidos</h3><p class="text-3xl font-bold mt-2">312</p><p class="text-xs text-green-500 mt-1">+5%</p></div>
                            <div class="kpi-card p-6 rounded-xl"><h3 class="text-sm font-medium text-slate-500">Clientes Ativos</h3><p class="text-3xl font-bold mt-2">1.480</p></div>
                            <div class="kpi-card p-6 rounded-xl"><h3 class="text-sm font-medium text-slate-500">Taxa de Convers√£o</h3><p class="text-3xl font-bold mt-2">4,2%</p><p class="text-xs text-red-500 mt-1">-0.8%</p></div>
                        </div>
                        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                            <div class="lg:col-span-2 chart-container-wrapper"><h3 class="text-lg font-semibold mb-4">Evolu√ß√£o das Vendas</h3><div class="chart-container"><canvas id="salesChart"></canvas></div></div>
                            <div class="module-section"><h3 class="text-lg font-semibold mb-4 mt-0">Tarefas R√°pidas</h3></div>
                        </div>`;
                    }
                    
                    const pageDiv = document.createElement('div');
                    pageDiv.id = module.id;
                    pageDiv.className = 'page-content hidden';
                    pageDiv.innerHTML = pageContent;
                    mainContentArea.appendChild(pageDiv);
                 });
            }

            function showPage(pageId) {
                document.querySelectorAll('.page-content').forEach(page => page.classList.add('hidden'));
                const activePage = document.getElementById(pageId);
                if (activePage) activePage.classList.remove('hidden');
                else document.getElementById('dashboard').classList.remove('hidden'); 
            }

            function setActiveSidebarLink(activeLinkHref) {
                 document.querySelectorAll('#sidebarNav .nav-link, #sidebarFooter .nav-link').forEach(link => link.classList.remove('active'));
                const activeLink = document.querySelector(`#sidebarNav a[href="${activeLinkHref}"], #sidebarFooter a[href="${activeLinkHref}"]`);
                if (activeLink) activeLink.classList.add('active');
            }

            function handleNavLinkClick(event) {
                event.preventDefault();
                const pageId = event.currentTarget.getAttribute('href').substring(1);
                showPage(pageId);
                setActiveSidebarLink(event.currentTarget.getAttribute('href'));
                if (window.innerWidth < 768 && !sidebar.classList.contains('-translate-x-full')) sidebar.classList.add('-translate-x-full');
            }
            
            menuToggle.addEventListener('click', () => sidebar.classList.toggle('-translate-x-full') );
        });
    </script>
</body>
</html>


launch.json

{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "type": "chrome",
            "request": "launch",
            "name": "Launch Chrome against localhost",
            "url": "http://localhost:3306",
            "webRoot": "${workspaceFolder}"
        }
    ]
}


server.js

// --- Servidor Backend para o Taipan-One ERP (Com Ferramenta de Diagn√≥stico) ---

const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');
const bcrypt = require('bcrypt');

const app = express();
app.use(cors());
app.use(express.json());

const dbConfig = {
    host: 'localhost',
    user: 'taipan_user',
    password: 'Taipan@2025',
    database: 'taipan_one_db'
};

// --- ROTA ESPECIAL PARA GERAR HASH ---
// Use esta rota para criar um hash compat√≠vel com o seu ambiente.
app.post('/api/generate-hash', async (req, res) => {
    try {
        const { password } = req.body;
        if (!password) {
            return res.status(400).send({ message: 'Forne√ßa uma senha no corpo do pedido: {"password": "sua_senha"}' });
        }
        const saltRounds = 10;
        const hash = await bcrypt.hash(password, saltRounds);
        
        // A mensagem mais importante aparecer√° no terminal onde o servidor est√° a correr.
        console.log('\n----------------------------------------------------');
        console.log('[NOVO HASH GERADO] Copie e cole este valor na sua base de dados:');
        console.log(hash);
        console.log('----------------------------------------------------\n');

        res.status(200).send({ message: 'Hash gerado com sucesso. Verifique o terminal do servidor.', hash: hash });
    } catch (error) {
        console.error("Erro ao gerar hash:", error);
        res.status(500).send({ message: "Erro interno ao gerar o hash." });
    }
});


// --- Rota de Login (c√≥digo de produ√ß√£o) ---
app.post('/api/login', async (req, res) => {
    const { username, password } = req.body;

    if (!username || !password) {
        return res.status(400).json({ message: 'Utilizador e senha s√£o obrigat√≥rios.' });
    }

    let connection;
    try {
        connection = await mysql.createConnection(dbConfig);
        const [rows] = await connection.execute('SELECT * FROM users WHERE username = ? AND is_active = 1', [username]);
        
        if (rows.length === 0) {
            await connection.end();
            return res.status(401).json({ message: 'Utilizador ou senha inv√°lidos.' });
        }

        const user = rows[0];
        const match = await bcrypt.compare(password, user.password_hash);

        if (!match) {
            await connection.end();
            return res.status(401).json({ message: 'Utilizador ou senha inv√°lidos.' });
        }
        
        // Se a senha correspondeu, buscar o resto dos dados
        const [role] = await connection.execute('SELECT * FROM roles WHERE id = ?', [user.role_id]);
        const [permissions] = await connection.execute('SELECT module_id FROM role_permissions WHERE role_id = ?', [user.role_id]);
        const [company] = user.company_id ? await connection.execute('SELECT name FROM companies WHERE id = ?', [user.company_id]) : [[{name: 'Global'}]];
        
        await connection.end();

        const userData = {
            id: user.id,
            fullName: user.full_name,
            role: { id: user.role_id, name: role[0].role_name, permissions: permissions.map(p => p.module_id) },
            company: { id: user.company_id, name: company[0].name }
        };
        
        console.log(`Login bem-sucedido para: ${username}`);
        res.status(200).json({ message: 'Login bem-sucedido!', user: userData });

    } catch (error) {
        if(connection) await connection.end();
        console.error('Erro cr√≠tico no processo de login:', error);
        res.status(500).json({ message: 'Erro interno do servidor.' });
    }
});

// Iniciar o Servidor
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Servidor Taipan-One (Modo de Gera√ß√£o de Hash) a correr na porta ${PORT}`);
});
